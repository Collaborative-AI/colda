/*!
 * clipboard.js v2.0.8
 * https://clipboardjs.com/
 *
 * Licensed MIT Â© Zeno Rocha
 */
!(function (t, e) {
  typeof exports === 'object' && typeof module === 'object'
    ? (module.exports = e())
    : typeof define === 'function' && define.amd
    ? define([], e)
    : typeof exports === 'object'
    ? (exports.ClipboardJS = e())
    : (t.ClipboardJS = e())
})(this, function () {
  return (
    (n = {
      686(t, e, n) {
        'use strict'
        n.d(e, {
          default() {
            return o
          },
        })
        var e = n(279)
        const i = n.n(e)
        var e = n(370)
        const u = n.n(e)
        var e = n(817)
        const c = n.n(e)
        function a(t) {
          try {
            return document.execCommand(t)
          } catch (t) {}
        }
        const f = function (t) {
          t = c()(t)
          return a('cut'), t
        }
        const l = function (t) {
          let e
          let n
          let o
          const r =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : { container: document.body }
          let i = ''
          return (
            typeof t === 'string'
              ? ((e = t),
                (n = document.documentElement.getAttribute('dir') === 'rtl'),
                ((o = document.createElement('textarea')).style.fontSize =
                  '12pt'),
                (o.style.border = '0'),
                (o.style.padding = '0'),
                (o.style.margin = '0'),
                (o.style.position = 'absolute'),
                (o.style[n ? 'right' : 'left'] = '-9999px'),
                (n = window.pageYOffset || document.documentElement.scrollTop),
                (o.style.top = ''.concat(n, 'px')),
                o.setAttribute('readonly', ''),
                (o.value = e),
                (o = o),
                r.container.appendChild(o),
                (i = c()(o)),
                a('copy'),
                o.remove())
              : ((i = c()(t)), a('copy')),
            i
          )
        }
        function r(t) {
          return (r =
            typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
              ? function (t) {
                  return typeof t
                }
              : function (t) {
                  return t &&
                    typeof Symbol === 'function' &&
                    t.constructor === Symbol &&
                    t !== Symbol.prototype
                    ? 'symbol'
                    : typeof t
                })(t)
        }
        const s = function () {
          var t =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
          var e = t.action
          const n = void 0 === e ? 'copy' : e
          const o = t.container
          var e = t.target
          var t = t.text
          if (n !== 'copy' && n !== 'cut')
            throw new Error(
              'Invalid "action" value, use either "copy" or "cut"'
            )
          if (void 0 !== e) {
            if (!e || r(e) !== 'object' || e.nodeType !== 1)
              throw new Error('Invalid "target" value, use a valid Element')
            if (n === 'copy' && e.hasAttribute('disabled'))
              throw new Error(
                'Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute'
              )
            if (
              n === 'cut' &&
              (e.hasAttribute('readonly') || e.hasAttribute('disabled'))
            )
              throw new Error(
                'Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes'
              )
          }
          return t
            ? l(t, { container: o })
            : e
            ? n === 'cut'
              ? f(e)
              : l(e, { container: o })
            : void 0
        }
        function d(t) {
          return (d =
            typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
              ? function (t) {
                  return typeof t
                }
              : function (t) {
                  return t &&
                    typeof Symbol === 'function' &&
                    t.constructor === Symbol &&
                    t !== Symbol.prototype
                    ? 'symbol'
                    : typeof t
                })(t)
        }
        function p(t, e) {
          for (let n = 0; n < e.length; n++) {
            const o = e[n]
            ;(o.enumerable = o.enumerable || !1),
              (o.configurable = !0),
              'value' in o && (o.writable = !0),
              Object.defineProperty(t, o.key, o)
          }
        }
        function y(t, e) {
          return (y =
            Object.setPrototypeOf ||
            function (t, e) {
              return (t.__proto__ = e), t
            })(t, e)
        }
        function h(n) {
          const o = (function () {
            if (typeof Reflect === 'undefined' || !Reflect.construct) return !1
            if (Reflect.construct.sham) return !1
            if (typeof Proxy === 'function') return !0
            try {
              return (
                Date.prototype.toString.call(
                  Reflect.construct(Date, [], function () {})
                ),
                !0
              )
            } catch (t) {
              return !1
            }
          })()
          return function () {
            let t
            let e = m(n)
            return (
              (t = o
                ? ((t = m(this).constructor),
                  Reflect.construct(e, arguments, t))
                : e.apply(this, arguments)),
              (e = this),
              !(t = t) || (d(t) !== 'object' && typeof t !== 'function')
                ? (function (t) {
                    if (void 0 !== t) return t
                    throw new ReferenceError(
                      "this hasn't been initialised - super() hasn't been called"
                    )
                  })(e)
                : t
            )
          }
        }
        function m(t) {
          return (m = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function (t) {
                return t.__proto__ || Object.getPrototypeOf(t)
              })(t)
        }
        function v(t, e) {
          t = 'data-clipboard-'.concat(t)
          if (e.hasAttribute(t)) return e.getAttribute(t)
        }
        var o = (function () {
          !(function (t, e) {
            if (typeof e !== 'function' && e !== null)
              throw new TypeError(
                'Super expression must either be null or a function'
              )
            ;(t.prototype = Object.create(e && e.prototype, {
              constructor: { value: t, writable: !0, configurable: !0 },
            })),
              e && y(t, e)
          })(r, i())
          let t
          let e
          let n
          const o = h(r)
          function r(t, e) {
            let n
            return (
              (function (t) {
                if (!(t instanceof r))
                  throw new TypeError('Cannot call a class as a function')
              })(this),
              (n = o.call(this)).resolveOptions(e),
              n.listenClick(t),
              n
            )
          }
          return (
            (t = r),
            (n = [
              {
                key: 'copy',
                value(t) {
                  const e =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : { container: document.body }
                  return l(t, e)
                },
              },
              {
                key: 'cut',
                value(t) {
                  return f(t)
                },
              },
              {
                key: 'isSupported',
                value() {
                  var t =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : ['copy', 'cut']
                  var t = typeof t === 'string' ? [t] : t
                  let e = !!document.queryCommandSupported
                  return (
                    t.forEach(function (t) {
                      e = e && !!document.queryCommandSupported(t)
                    }),
                    e
                  )
                },
              },
            ]),
            (e = [
              {
                key: 'resolveOptions',
                value() {
                  const t =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : {}
                  ;(this.action =
                    typeof t.action === 'function'
                      ? t.action
                      : this.defaultAction),
                    (this.target =
                      typeof t.target === 'function'
                        ? t.target
                        : this.defaultTarget),
                    (this.text =
                      typeof t.text === 'function' ? t.text : this.defaultText),
                    (this.container =
                      d(t.container) === 'object' ? t.container : document.body)
                },
              },
              {
                key: 'listenClick',
                value(t) {
                  const e = this
                  this.listener = u()(t, 'click', function (t) {
                    return e.onClick(t)
                  })
                },
              },
              {
                key: 'onClick',
                value(t) {
                  const e = t.delegateTarget || t.currentTarget
                  var t = s({
                    action: this.action(e),
                    container: this.container,
                    target: this.target(e),
                    text: this.text(e),
                  })
                  this.emit(t ? 'success' : 'error', {
                    action: this.action,
                    text: t,
                    trigger: e,
                    clearSelection() {
                      e && e.focus(),
                        document.activeElement.blur(),
                        window.getSelection().removeAllRanges()
                    },
                  })
                },
              },
              {
                key: 'defaultAction',
                value(t) {
                  return v('action', t)
                },
              },
              {
                key: 'defaultTarget',
                value(t) {
                  t = v('target', t)
                  if (t) return document.querySelector(t)
                },
              },
              {
                key: 'defaultText',
                value(t) {
                  return v('text', t)
                },
              },
              {
                key: 'destroy',
                value() {
                  this.listener.destroy()
                },
              },
            ]) && p(t.prototype, e),
            n && p(t, n),
            r
          )
        })()
      },
      828(t) {
        let e
        typeof Element === 'undefined' ||
          Element.prototype.matches ||
          ((e = Element.prototype).matches =
            e.matchesSelector ||
            e.mozMatchesSelector ||
            e.msMatchesSelector ||
            e.oMatchesSelector ||
            e.webkitMatchesSelector),
          (t.exports = function (t, e) {
            for (; t && t.nodeType !== 9; ) {
              if (typeof t.matches === 'function' && t.matches(e)) return t
              t = t.parentNode
            }
          })
      },
      438(t, e, n) {
        const u = n(828)
        function i(t, e, n, o, r) {
          const i = function (e, n, t, o) {
            return function (t) {
              ;(t.delegateTarget = u(t.target, n)),
                t.delegateTarget && o.call(e, t)
            }
          }.apply(this, arguments)
          return (
            t.addEventListener(n, i, r),
            {
              destroy() {
                t.removeEventListener(n, i, r)
              },
            }
          )
        }
        t.exports = function (t, e, n, o, r) {
          return typeof t.addEventListener === 'function'
            ? i.apply(null, arguments)
            : typeof n === 'function'
            ? i.bind(null, document).apply(null, arguments)
            : (typeof t === 'string' && (t = document.querySelectorAll(t)),
              Array.prototype.map.call(t, function (t) {
                return i(t, e, n, o, r)
              }))
        }
      },
      879(t, n) {
        ;(n.node = function (t) {
          return void 0 !== t && t instanceof HTMLElement && t.nodeType === 1
        }),
          (n.nodeList = function (t) {
            const e = Object.prototype.toString.call(t)
            return (
              void 0 !== t &&
              (e === '[object NodeList]' || e === '[object HTMLCollection]') &&
              'length' in t &&
              (t.length === 0 || n.node(t[0]))
            )
          }),
          (n.string = function (t) {
            return typeof t === 'string' || t instanceof String
          }),
          (n.fn = function (t) {
            return Object.prototype.toString.call(t) === '[object Function]'
          })
      },
      370(t, e, n) {
        const f = n(879)
        const l = n(438)
        t.exports = function (t, e, n) {
          if (!t && !e && !n) throw new Error('Missing required arguments')
          if (!f.string(e))
            throw new TypeError('Second argument must be a String')
          if (!f.fn(n)) throw new TypeError('Third argument must be a Function')
          if (f.node(t))
            return (
              (c = e),
              (a = n),
              (u = t).addEventListener(c, a),
              {
                destroy() {
                  u.removeEventListener(c, a)
                },
              }
            )
          if (f.nodeList(t))
            return (
              (o = t),
              (r = e),
              (i = n),
              Array.prototype.forEach.call(o, function (t) {
                t.addEventListener(r, i)
              }),
              {
                destroy() {
                  Array.prototype.forEach.call(o, function (t) {
                    t.removeEventListener(r, i)
                  })
                },
              }
            )
          if (f.string(t))
            return (t = t), (e = e), (n = n), l(document.body, t, e, n)
          throw new TypeError(
            'First argument must be a String, HTMLElement, HTMLCollection, or NodeList'
          )
          let o, r, i, u, c, a
        }
      },
      817(t) {
        t.exports = function (t) {
          let e
          var n =
            t.nodeName === 'SELECT'
              ? (t.focus(), t.value)
              : t.nodeName === 'INPUT' || t.nodeName === 'TEXTAREA'
              ? ((e = t.hasAttribute('readonly')) ||
                  t.setAttribute('readonly', ''),
                t.select(),
                t.setSelectionRange(0, t.value.length),
                e || t.removeAttribute('readonly'),
                t.value)
              : (t.hasAttribute('contenteditable') && t.focus(),
                (n = window.getSelection()),
                (e = document.createRange()).selectNodeContents(t),
                n.removeAllRanges(),
                n.addRange(e),
                n.toString())
          return n
        }
      },
      279(t) {
        function e() {}
        ;(e.prototype = {
          on(t, e, n) {
            const o = this.e || (this.e = {})
            return (o[t] || (o[t] = [])).push({ fn: e, ctx: n }), this
          },
          once(t, e, n) {
            const o = this
            function r() {
              o.off(t, r), e.apply(n, arguments)
            }
            return (r._ = e), this.on(t, r, n)
          },
          emit(t) {
            for (
              let e = [].slice.call(arguments, 1),
                n = ((this.e || (this.e = {}))[t] || []).slice(),
                o = 0,
                r = n.length;
              o < r;
              o++
            )
              n[o].fn.apply(n[o].ctx, e)
            return this
          },
          off(t, e) {
            const n = this.e || (this.e = {})
            const o = n[t]
            const r = []
            if (o && e)
              for (let i = 0, u = o.length; i < u; i++)
                o[i].fn !== e && o[i].fn._ !== e && r.push(o[i])
            return r.length ? (n[t] = r) : delete n[t], this
          },
        }),
          (t.exports = e),
          (t.exports.TinyEmitter = e)
      },
    }),
    (r = {}),
    (o.n = function (t) {
      const e =
        t && t.__esModule
          ? function () {
              return t.default
            }
          : function () {
              return t
            }
      return o.d(e, { a: e }), e
    }),
    (o.d = function (t, e) {
      for (const n in e)
        o.o(e, n) &&
          !o.o(t, n) &&
          Object.defineProperty(t, n, { enumerable: !0, get: e[n] })
    }),
    (o.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e)
    }),
    o(686).default
  )
  function o(t) {
    if (r[t]) return r[t].exports
    const e = (r[t] = { exports: {} })
    return n[t](e, e.exports, o), e.exports
  }
  let n, r
})
