"type": "module",

dependency: 生产环境
dev-dependency: 开发环境

"asar": false
 "main": "./src/main.js",
  "files": [
    "./src/main.js"
  ],

"build": {
    "productName": "Apollo",
    "appId": "com.apollo.app",
    "compression": "store",
    "win": {
      "target": [
        {
          "target": "nsis",
          "arch": [
            "x64"
          ]
        }
      ]
    },
    "nsis": {
      "oneClick": false,
      "perMachine": true,
      "allowElevation": true,
      "allowToChangeInstallationDirectory": true,
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true
    },
    "directories": {
      "output": "build"
    }
  }

"eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "@vue/airbnb"
    ],
    "parserOptions": {
      "parser": "babel-eslint"
    },
    "rules": {}
  },
  
import sqlite3
import sys
import functools
# create database and database connection
sql_db = sqlite3.connect("Test.db")

# create a cursor object
cur = sql_db.cursor()

# create a simple table
cur.execute("CREATE TABLE IF NOT EXISTS test(id INTEGER PRIMARY KEY,name TEXT,age INTEGER)")

# add new data
cur.execute("INSERT OR IGNORE INTO test values(?,?,?)", (6, "test_user_1", 20))

# event commit
sql_db.commit()

# close cursor object and database connection (close cursor first)
cur.close()
sql_db.close()


websocket daima:
Chat------------------------
<template>
  <div class="container">
    <h2>
      All chats:
    </h2>
    <br>
    {{ chat_messages }}
    <br>
    <br>

    <input placeholder="Type in Message" v-model="msg">
    <button @click="onMsgSubmit()">Submit Message</button>
    <br>
    <br>
  
    <input class="file" name="file" type="file" accept="image/png,image/gif,image/jpeg" @change="update"/>
    <br>
    <br>
    <button @click="left()">Leave ChatRoom</button>
    {{ "server response: " + server_response }}
  </div>
</template>

<script>

import {request} from '@/network/request';

export default {
  data() {
    return {
      messages: [],
      msg: '',
      chat_messages: [],
      server_response: [],
    };
  },

  mounted() {
    // this.$socket.connect();

    request({
      url: '/index',
    }).then((res) => {
      this.server_response.push(res);
      console.log(res);
    }).catch((err) => {
      this.server_response.push('error');
      console.log(err);
    });

    // const url = 'http://127.0.0.1:5000/index'
    //     axios({
    //         method: 'get',
    //         url: url,
    //         data: {
    //             msg: 'hello'
    //         }
    //     }).then(res => {
    //         console.log(res)
    //     })
  },

  sockets: {
    connect() {
      console.log('socket connected');
      this.$socket.emit('connect',  );
    },
    // # 监听后端传来数据（自定义提示）
    response(res) {
      console.log('response');
      console.log('aa', res);
      this.server_response.push(res.msg);
    },
    // this.$socket.on('connect', () => {
    //   console.log("emit received from server");
    // });
    // # 监听后端传来数据（自定义消息）
    chat_message(msg) {
      this.chat_messages.push(msg.msg);
    },
  },
  methods: {
    onMsgSubmit() {
      this.$socket.emit('text', this.msg);
      this.msg = '';
    },
    left() {
      this.$socket.emit('leave_chat', );
    },
    update(e) {
      let file = e.target.files[0];
      this.$socket.emit('upload_file', file);
        // let param = new FormData(); //创建form对象
        // param.append('file',file);//通过append向form对象添加数据
        // console.log(param.get('file')); //FormData私有类对象，访问不到，可以通过get判断值是否传进去
        // this.$axios.post('http://127.0.0.1:5000/upload',param,{headers:{'Content-Type':'application/x-www-form-urlencoded' }}, ) //请求头要为表单
        //   .then(response=>{
        //     console.log(response.data);
        //   })
        //   .catch(function (error) {
        //     console.log(error);
        //   })
    }
  },

};
</script>


Login-----------------------------------------------------------------
<template>
  <div class="container">
    <router-link to="/room"> Go To Choose Room </router-link>
    <!-- <Form v-slot="{ errors }">
      <Field name="field" :rules="isRequired" />

      <span>{{ errors.field }}</span>
    </Form> -->
    <input placeholder="Type in UserName" v-model="name">
    <button @click="submit()">Submit</button>
    {{ messages }}
  </div>
</template>

<script>

// Encapsulated network request
import {request} from '@/network/request';
import {request_withdata} from '@/network/request';

// Validation form
// import { Field, Form } from 'vee-validate';

export default {
  name: "Login",
  // components: {
  //   Field,
  //   Form,
  // },
  data() {
    return {
      name: "",
      messages: [],
    };
  },

  mounted() {
    // this.$socket.connect();
    request({
      url: '/login',
    }).then((res) => {
      this.messages.push(res);
      console.log(res);
    }).catch((err) => {
      this.chat = 'error';
      console.log(err);
    });
  },

  sockets: {
    connect() {
      console.log('socket connected');
    },
  },

  methods: {
    // isRequired(value) {
    //   return value ? true : 'This field is required';
    // },
    submit() {
      // # 用户点击，提交用户输入
      // console.log(e);
      // this.$socket.emit('login', this.name);
      console.log(this.$store.state.name)
      this.$store.state.name = this.name;

      request_withdata({
        url: '/login',
        data: this.name,
      }).then((res) => {
        this.messages.push(res);
        console.log(res);
      }).catch((err) => {
        this.chat = 'error';
        console.log(err);
      });

      this.$router.push('/room');

    },
  },

};
</script>



room---------------------------------------
<template>
  <div class="container">
    <h2>
      Response: {{ response }}
    </h2>
    
    <input placeholder="Type in Room Number" v-model="chosen_room"> 

    <button @click="onMsgSubmit()">Submit Room Number</button>
    <br>
    <br>
    <h2>
        Your Invitation: {{ invitation }}
    </h2>
    <div v-if="has_invitation">
        
    </div>
    <br>
    <br>
    <input placeholder="Type in Cooperator" v-model="single_cooperator">
    <h2>
      Cooperator Invited:
      {{ cooperator }}
    </h2>
    <button @click="add_cooperator()">Add Cooperator</button>
    <button @click="invite()">Submit Cooperator</button>
  </div>
</template>

<script>

// import {request} from '@/network/request';

export default {
  data() {
    return {
      chosen_room: '',
      chat: null,
      cooperator: '',
      single_cooperator: '',
      invitation: 'No Invitation',
      response: []
    };
  },

  mounted() {
    // console.log("name in room",this.$store.state.name);
    this.$socket.connect();
    this.$socket.emit('init', this.$store.state.name);
  },

  sockets: {
    connect() {
      console.log('socket connected');
      
    },
    // # 监听后端传来数据（自定义提示）
    response(res) {
      this.response.push(res.msg);
    },
    // this.$socket.on('connect', () => {
    //   console.log("emit received from server");
    // });
    // # 监听后端传来数据（自定义消息）
    invite_message(res) {
      this.invitation = res.msg;
    }
  },
  methods: {
    onMsgSubmit() {
      // # 用户点击，提交用户输入
      this.$socket.emit('join_chat', this.chosen_room);
      // Vue.prototype.$chosen_room = this.chosen_room;
      this.$router.push('/chat');
      // this.$socket.emit('user_input', msg)
    },
    add_cooperator() {
      this.cooperator += this.single_cooperator + ',';
      this.single_cooperator = '';
    },
    invite() {
      this.$socket.emit('invite', this.cooperator);
    },

  },

};
</script>


// Vue.use(new VueSocketIO({
//   debug: true,
//   connection: 'http://127.0.0.1:5000/chatroom',
//   // extraHeaders: {"Access-Control-Allow-Origin": '*'},
// }));

electron windows 打包:

"target": "NSIS",
"nsis": {
      "oneClick": false,
      "perMachine": true,
      "allowElevation": true,
      "allowToChangeInstallationDirectory": true,
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true
    }


"linux": {
      "icon": "build/linux-unpacked/resources/app/src/assets/packaging.png",
      "target": [
        "snap"
      ]
    },


"win": {
      "icon": "build/linux-unpacked/resources/app/icons/icon.ico"
    },
    "target": "NSIS",
    "nsis": {
      "oneClick": false,
      "perMachine": true,
      "allowElevation": true,
      "allowToChangeInstallationDirectory": true,
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true
    },