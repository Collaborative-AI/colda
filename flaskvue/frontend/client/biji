<template>
  <div class="container">
    <alert 
      v-for="(alert, index) in alerts" :key="index"
      v-bind:variant="alert.variant"
      v-bind:message="alert.message">
    </alert>

    <!-- <ul class="content">
       <li v-for="(msg, index) in $store.state.msg" :key="index">
         {{ msg }}
       </li>
    </ul> -->


    <button type="button" class="btn btn-success">HomePage</button>
  </div>
</template>

<script>
import Alert from '../components/Alert.vue'
// const Alert = require('../components/Alert.vue').default
import store from '../store'//xie

export default {
  name: 'Home',  // Name of the component
  // props: ['log'],
  components: {
    alert: Alert
  },
  data () {
    return {
      alerts: [
        {
          variant: 'info',
          message: 'Hi'
        },
        {
          variant: 'danger',
          message: 'Oops..'
        },
        {
          variant: 'success',
          message: 'OK'
        }
      ],
    }
  },
  beforeCreate() {
        if (!store.state.is_authenticated) {
            this.$router.push({ name: 'Login' })
            // you could, of course, also use the router to actually go to a 404 page if you wanted.
        }
    }
}
// exports.default = Home
</script>

!!!!!!!!!!
<template>
  <b-container fluid>
    <b-row class="my-1" v-for="type in types" :key="type">
      <b-col sm="3">
        <label :for="`type-${type}`">Type <code>{{ type }}</code>:</label>
      </b-col>
      <b-col sm="9">
        <b-form-input :id="`type-${type}`" :type="type"></b-form-input>
      </b-col>
    </b-row>
  </b-container>
</template>

<script>
  export default {
    data() {
      return {
        types: [
          'text',
          'number',
          'email',
          'password',
          'search',
          'url',
          'tel',
          'date',
          'time',
          'range',
          'color'
        ]
      }
    }
  }
</script>
!!!!!!!!!!

<!-- revise -->
<div class="container">
  <nav class="navbar navbar-expand-lg navbar-light bg-light" style="margin-bottom: 20px;">
    <div class="navbar-brand">
    <router-link to="/" class="g-text-underline--none--hover">
      <img src="../assets/logo.png" width="30" height="30" class="d-inline-block align-top" alt="">
        Apollo 
    </router-link>
    </div>

    <!-- <div class="content">
      <Home :log="log"></Home>
    </div> -->

    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav mr-auto mt-2 mt-lg-0">
        <!-- <li class="nav-item">
          <router-link to="/" class="nav-link">Home <span class="sr-only">(current)</span></router-link>
        </li> -->
        <li v-if="sharedState.is_authenticated" class="nav-item g-mr-20">
          <router-link v-bind:to="{ path: '/find_assistor' }" class="nav-link"><i class="icon-education-033 u-line-icon-pro g-color-red g-font-size-16 g-pos-rel g-top-2 g-mr-3"></i> Call For Help </router-link>
        </li>
        <li v-if="sharedState.is_authenticated" class="nav-item g-mr-20">
          <router-link v-bind:to="{ path: '/plist' }" class="nav-link"><i class="icon-education-033 u-line-icon-pro g-color-red g-font-size-16 g-pos-rel g-top-2 g-mr-3"></i> Pending <span id="new_notifications_count" style="visibility: hidden;" class="u-label g-font-size-11 g-bg-aqua g-rounded-20 g-px-10">0</span></router-link>
        </li>
        <li v-if="sharedState.is_authenticated" class="nav-item g-mr-20">
          <router-link v-bind:to="{ path: '/notifications' }" class="nav-link"><i class="icon-education-033 u-line-icon-pro g-color-red g-font-size-16 g-pos-rel g-top-2 g-mr-3"></i> History <span id="new_notifications_count" style="visibility: hidden;" class="u-label g-font-size-11 g-bg-aqua g-rounded-20 g-px-10">0</span></router-link>
        </li>
        <li v-if="sharedState.is_authenticated" class="nav-item g-mr-20">
          <router-link v-bind:to="{ name: 'SettingProfile' }" class="nav-link"><i class="icon-education-033 u-line-icon-pro g-color-red g-font-size-16 g-pos-rel g-top-2 g-mr-3"></i> Settings</router-link>
        </li>
        <li v-if="sharedState.is_authenticated" class="nav-item g-mr-20">
            <a v-on:click="handlerLogout" class="nav-link" href="#"><i class="icon-logout g-pos-rel g-top-1 g-mr-5"></i> Sign out</a>
        </li>
        <li class="nav-item">
          <router-link to="/shiyan" class="nav-link">Ceshi</router-link>
        </li>
        <!-- <input type="radio" id="not_receive" value="not_receive" v-model="picked" v-on:change="not_receive()">
        <label for="not_receive">Not Respond</label>
        <br>
        <input type="radio" id="receive" value="receive" v-model="picked" v-on:change="receive()">
        <label for="receive">Respond</label>
        <br> -->
        <!-- <span>Picked: {{ picked }}</span> -->

      </ul>


      

      

      <ul v-if="sharedState.is_authenticated" class="nav navbar-nav navbar-right">
        
        
         

        <!-- <li class="nav-item g-mr-20">
          <router-link v-bind:to="{ name: 'MessagesHistoryResource', query: { from: 5 } }" class="nav-link">Send to B</router-link>
        </li> -->
        <!-- <div v-if="sponsor_request_show">
          <input type="file" name="csvfile" ref="csvData" />
          <input type="button" @click="sponsor_csv()" value="JS转换"/>
        </div> -->

        <div v-if="unread_request_show">
          <input type="file" name="csvfile" ref="csvData" />
          <input type="button" @click="assistor_csv()" value="JS转换"/>
        </div>

        

        
      </ul>
      <!-- <ul v-else class="nav navbar-nav navbar-right">          
        <li class="nav-item">
          <router-link to="/login" class="nav-link"><i class="icon-login g-pos-rel g-top-1 g-mr-5"></i> Sign in</router-link>
        </li>
      </ul> -->
    </div>
  </nav>
</div>






!!!!!!!!!!!!!!!!
<template>
  <div class="container">
    <div class="card border-0 g-mb-15">
      <div class="d-flex justify-content-start g-brd-around g-brd-gray-light-v4 g-brd-left-1 g-pa-20 g-mb-10"
        v-for="(pend, index) in pending" v-bind:key="index">
        <div class="align-self-center g-px-10">
          <p class="m-0">Task Name: {{ pend.task_name }}</p>
          <p class="m-0">Task ID:  {{ pend.task_id }} </p>
          <br>
        </div>
        <div class="align-self-center ml-auto">
          <router-link v-bind:to="{ name: 'PendItem', params: { task_id: pend.task_id } }">
            <button class="btn btn-block u-btn-outline-primary g-rounded-20 g-px-10">Details</button>
          </router-link>
        </div>
        
      </div>

    <!-- {{pending}} -->
    <!-- {{sharedState.pending}} -->
    <!-- <button type="submit" @click="shan()" class="btn btn-primary">delete</button> -->
    </div>
  </div>
</template>

<script>
import store from '../../../store.js'
import db from '../../../db'
// import penditem from "../Penditem.vue"

export default {
  name: 'Plist',  // Name of the component
  // props: ['log'],
  
  data () {
    return {
      sharedState: store.state,
      pending: "",
    }
  },

  methods: {
    shan() {
      this.sharedState.receive_request = 'not_receive'
      // this.sharedState.pending.a='apple'
      // this.sharedState.pending.b='big'
    //   this.sharedState.pending.push({
    //     a: 'add',
    //     b: 'bust'
    // })
      // this.sharedState.pending.splice(0, 1);
      this.sharedState.pending.pop()
    //   console.log(this.sharedState.pending)
    },
  },

created () {
    
    // this.getUserMessagesSenders(this.sharedState.user_id)
    let select_sentence = 'SELECT * FROM User_Pending_Page WHERE user_id=?';
    let vm=this;
            db.all(select_sentence, [this.sharedState.user_id], function(err, row){
            if (err){ 
              console.log(err);
            }
            else{
              console.log(row)
              vm.pending=row
              console.log(vm.pending)
            }
        
            })//end db.get
  },
  


  
}
// exports.default = Home
</script>








!!!!!!!
"devDependencies": {
    "@vue/cli": "^4.5.13",
    "@vue/cli-plugin-router": "~4.5.0",
    "@vue/cli-service": "^4.5.13",
    "@vue/eslint-config-airbnb": "^5.3.0",
    "cross-env": "^7.0.3",
    "electron": "^13.1.9",
    "electron-builder": "^22.11.7",
    "electron-devtools-installer": "^3.2.0",
    "electron-rebuild": "^3.2.1",
    "eslint-plugin-import": "^2.20.2",
    "eslint-plugin-vue": "^6.2.2",
    "vue-cli-plugin-electron-builder": "~2.1.1"
  },


// "postinstall": "electron-builder install-app-deps",
    // "postuninstall": "electron-builder install-app-deps"
"type": "module",



      let select_train_data_path = 'SELECT train_data_path FROM User_Chosen_Path WHERE "user_id"=' + vm.sharedState.user_id + " AND 'task_id'=" + task_id;
      db.get(select_train_data_path, function(err, train_data_path){
        if (err){ 
          throw err;
        }


let select_default_id_path = 'SELECT default_id_path FROM User_Default_Path WHERE user_id=' + this.sharedState.user_id;
db.get(select_default_id_path, function(err, match_id_address){
if (err){ 
  throw err;
}
dependency: 生产环境
dev-dependency: 开发环境

"asar": false
 "main": "./src/main.js",
  "files": [
    "./src/main.js"
  ],

"build": {
    "productName": "Apollo",
    "appId": "com.apollo.app",
    "compression": "store",
    "win": {
      "target": [
        {
          "target": "nsis",
          "arch": [
            "x64"
          ]
        }
      ]
    },
    "nsis": {
      "oneClick": false,
      "perMachine": true,
      "allowElevation": true,
      "allowToChangeInstallationDirectory": true,
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true
    },
    "directories": {
      "output": "build"
    }
  }

"eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "@vue/airbnb"
    ],
    "parserOptions": {
      "parser": "babel-eslint"
    },
    "rules": {}
  },
  
import sqlite3
import sys
import functools
# create database and database connection
sql_db = sqlite3.connect("Test.db")

# create a cursor object
cur = sql_db.cursor()

# create a simple table
cur.execute("CREATE TABLE IF NOT EXISTS test(id INTEGER PRIMARY KEY,name TEXT,age INTEGER)")

# add new data
cur.execute("INSERT OR IGNORE INTO test values(?,?,?)", (6, "test_user_1", 20))

# event commit
sql_db.commit()

# close cursor object and database connection (close cursor first)
cur.close()
sql_db.close()


websocket daima:
Chat------------------------
<template>
  <div class="container">
    <h2>
      All chats:
    </h2>
    <br>
    {{ chat_messages }}
    <br>
    <br>

    <input placeholder="Type in Message" v-model="msg">
    <button @click="onMsgSubmit()">Submit Message</button>
    <br>
    <br>
  
    <input class="file" name="file" type="file" accept="image/png,image/gif,image/jpeg" @change="update"/>
    <br>
    <br>
    <button @click="left()">Leave ChatRoom</button>
    {{ "server response: " + server_response }}
  </div>
</template>

<script>

import {request} from '@/network/request';

export default {
  data() {
    return {
      messages: [],
      msg: '',
      chat_messages: [],
      server_response: [],
    };
  },

  mounted() {
    // this.$socket.connect();

    request({
      url: '/index',
    }).then((res) => {
      this.server_response.push(res);
      console.log(res);
    }).catch((err) => {
      this.server_response.push('error');
      console.log(err);
    });

    // const url = 'http://127.0.0.1:5000/index'
    //     axios({
    //         method: 'get',
    //         url: url,
    //         data: {
    //             msg: 'hello'
    //         }
    //     }).then(res => {
    //         console.log(res)
    //     })
  },

  sockets: {
    connect() {
      console.log('socket connected');
      this.$socket.emit('connect',  );
    },
    // # 监听后端传来数据（自定义提示）
    response(res) {
      console.log('response');
      console.log('aa', res);
      this.server_response.push(res.msg);
    },
    // this.$socket.on('connect', () => {
    //   console.log("emit received from server");
    // });
    // # 监听后端传来数据（自定义消息）
    chat_message(msg) {
      this.chat_messages.push(msg.msg);
    },
  },
  methods: {
    onMsgSubmit() {
      this.$socket.emit('text', this.msg);
      this.msg = '';
    },
    left() {
      this.$socket.emit('leave_chat', );
    },
    update(e) {
      let file = e.target.files[0];
      this.$socket.emit('upload_file', file);
        // let param = new FormData(); //创建form对象
        // param.append('file',file);//通过append向form对象添加数据
        // console.log(param.get('file')); //FormData私有类对象，访问不到，可以通过get判断值是否传进去
        // this.$axios.post('http://127.0.0.1:5000/upload',param,{headers:{'Content-Type':'application/x-www-form-urlencoded' }}, ) //请求头要为表单
        //   .then(response=>{
        //     console.log(response.data);
        //   })
        //   .catch(function (error) {
        //     console.log(error);
        //   })
    }
  },

};
</script>


Login-----------------------------------------------------------------
<template>
  <div class="container">
    <router-link to="/room"> Go To Choose Room </router-link>
    <!-- <Form v-slot="{ errors }">
      <Field name="field" :rules="isRequired" />

      <span>{{ errors.field }}</span>
    </Form> -->
    <input placeholder="Type in UserName" v-model="name">
    <button @click="submit()">Submit</button>
    {{ messages }}
  </div>
</template>

<script>

// Encapsulated network request
import {request} from '@/network/request';
import {request_withdata} from '@/network/request';

// Validation form
// import { Field, Form } from 'vee-validate';

export default {
  name: "Login",
  // components: {
  //   Field,
  //   Form,
  // },
  data() {
    return {
      name: "",
      messages: [],
    };
  },

  mounted() {
    // this.$socket.connect();
    request({
      url: '/login',
    }).then((res) => {
      this.messages.push(res);
      console.log(res);
    }).catch((err) => {
      this.chat = 'error';
      console.log(err);
    });
  },

  sockets: {
    connect() {
      console.log('socket connected');
    },
  },

  methods: {
    // isRequired(value) {
    //   return value ? true : 'This field is required';
    // },
    submit() {
      // # 用户点击，提交用户输入
      // console.log(e);
      // this.$socket.emit('login', this.name);
      console.log(this.$store.state.name)
      this.$store.state.name = this.name;

      request_withdata({
        url: '/login',
        data: this.name,
      }).then((res) => {
        this.messages.push(res);
        console.log(res);
      }).catch((err) => {
        this.chat = 'error';
        console.log(err);
      });

      this.$router.push('/room');

    },
  },

};
</script>



room---------------------------------------
<template>
  <div class="container">
    <h2>
      Response: {{ response }}
    </h2>
    
    <input placeholder="Type in Room Number" v-model="chosen_room"> 

    <button @click="onMsgSubmit()">Submit Room Number</button>
    <br>
    <br>
    <h2>
        Your Invitation: {{ invitation }}
    </h2>
    <div v-if="has_invitation">
        
    </div>
    <br>
    <br>
    <input placeholder="Type in Cooperator" v-model="single_cooperator">
    <h2>
      Cooperator Invited:
      {{ cooperator }}
    </h2>
    <button @click="add_cooperator()">Add Cooperator</button>
    <button @click="invite()">Submit Cooperator</button>
  </div>
</template>

<script>

// import {request} from '@/network/request';

export default {
  data() {
    return {
      chosen_room: '',
      chat: null,
      cooperator: '',
      single_cooperator: '',
      invitation: 'No Invitation',
      response: []
    };
  },

  mounted() {
    // console.log("name in room",this.$store.state.name);
    this.$socket.connect();
    this.$socket.emit('init', this.$store.state.name);
  },

  sockets: {
    connect() {
      console.log('socket connected');
      
    },
    // # 监听后端传来数据（自定义提示）
    response(res) {
      this.response.push(res.msg);
    },
    // this.$socket.on('connect', () => {
    //   console.log("emit received from server");
    // });
    // # 监听后端传来数据（自定义消息）
    invite_message(res) {
      this.invitation = res.msg;
    }
  },
  methods: {
    onMsgSubmit() {
      // # 用户点击，提交用户输入
      this.$socket.emit('join_chat', this.chosen_room);
      // Vue.prototype.$chosen_room = this.chosen_room;
      this.$router.push('/chat');
      // this.$socket.emit('user_input', msg)
    },
    add_cooperator() {
      this.cooperator += this.single_cooperator + ',';
      this.single_cooperator = '';
    },
    invite() {
      this.$socket.emit('invite', this.cooperator);
    },

  },

};
</script>


// Vue.use(new VueSocketIO({
//   debug: true,
//   connection: 'http://127.0.0.1:5000/chatroom',
//   // extraHeaders: {"Access-Control-Allow-Origin": '*'},
// }));

electron windows 打包:

"target": "NSIS",
"nsis": {
      "oneClick": false,
      "perMachine": true,
      "allowElevation": true,
      "allowToChangeInstallationDirectory": true,
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true
    }


"linux": {
      "icon": "build/linux-unpacked/resources/app/src/assets/packaging.png",
      "target": [
        "snap"
      ]
    },


"win": {
      "icon": "build/linux-unpacked/resources/app/icons/icon.ico"
    },
    "target": "NSIS",
    "nsis": {
      "oneClick": false,
      "perMachine": true,
      "allowElevation": true,
      "allowToChangeInstallationDirectory": true,
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true
    },